import logging
import requests
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")
CITY = 'Zelenograd, RU'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ UNIX –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
def format_unix_time(unix_time, tz_shift):
    dt = datetime.utcfromtimestamp(unix_time + tz_shift)
    return dt.strftime("%H:%M")

# –ö–æ–º–∞–Ω–¥–∞ /weather
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    data = response.json()

    if response.status_code == 200:
        temp = data['main']['temp']
        feels_like = data['main']['feels_like']
        humidity = data['main']['humidity']
        wind_speed = data['wind']['speed']
        description = data['weather'][0]['description'].capitalize()
        sunrise = format_unix_time(data['sys']['sunrise'], data['timezone'])
        sunset = format_unix_time(data['sys']['sunset'], data['timezone'])
        dt = datetime.utcfromtimestamp(data['dt'] + data['timezone']).strftime("%d.%m.%Y %H:%M")

        weather_message = (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥–µ ({dt}):\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
            f"üåÖ –í–æ—Å—Ö–æ–¥: {sunrise}\n"
            f"üåá –ó–∞–∫–∞—Ç: {sunset}"
        )

        await update.message.reply_text(weather_message)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É :(")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /weather —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ó–µ–ª–µ–Ω–æ–≥—Ä–∞–¥–µ.")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("weather", weather))

    app.run_polling()

if __name__ == '__main__':
    main()
